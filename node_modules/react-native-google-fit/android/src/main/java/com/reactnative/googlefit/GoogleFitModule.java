package com.reactnative.googlefit;

import android.app.Activity;
import android.content.pm.PackageManager;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.IllegalViewOperationException;

public class GoogleFitModule extends ReactContextBaseJavaModule {

    private static final String REACT_MODULE = "RNGoogleFit";
    private ReactContext mReactContext;
    private GoogleFitManager googleFitManager = null;
    private String GOOGLE_FIT_APP_URI = "com.google.android.apps.fitness";

    public GoogleFitModule(ReactApplicationContext reactContext) {
        super(reactContext);

        this.mReactContext = reactContext;
    }

    @Override
    public String getName() {
        return REACT_MODULE;
    }

    @ReactMethod
    public void authorize() {
        final Activity activity = getCurrentActivity();
        if(googleFitManager == null) {
            googleFitManager = new GoogleFitManager(mReactContext, activity);
        }
        googleFitManager.authorize();
    }

    @ReactMethod
    public void getAggregatedStepsByDays(double startDate, double endDate, Callback errorCallback, Callback successCallback) {
        try {
            successCallback.invoke(googleFitManager.getAggregatedStepsByDays((long)startDate, (long)endDate));
        } catch (IllegalViewOperationException e) {
            errorCallback.invoke(e.getMessage());
        }
    }

    @ReactMethod
    public void getAggregatedCaloriesByDays(double startDate, double endDate, Callback errorCallback, Callback successCallback) {
        try {
            successCallback.invoke(googleFitManager.getAggregatedCaloriesByDays((long)startDate, (long)endDate));
        } catch (IllegalViewOperationException e) {
            errorCallback.invoke(e.getMessage());
        }
    }

    @ReactMethod
    public void getAggregatedDistanceByDays(double startDate, double endDate, Callback errorCallback, Callback successCallback) {
        try {
            successCallback.invoke(googleFitManager.getAggregatedDistanceByDays((long)startDate, (long)endDate));
        } catch (IllegalViewOperationException e) {
            errorCallback.invoke(e.getMessage());
        }
    }

    @ReactMethod
    public void getAggregatedActiveTimeByDays(double startDate, double endDate, Callback errorCallback, Callback successCallback) {
        try {
            successCallback.invoke(googleFitManager.getAggregatedActiveTimeByDays((long)startDate, (long)endDate));
        } catch (IllegalViewOperationException e) {
            errorCallback.invoke(e.getMessage());
        }
    }
}
