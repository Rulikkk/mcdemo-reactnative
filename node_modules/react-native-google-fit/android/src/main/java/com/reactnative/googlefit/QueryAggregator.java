package com.reactnative.googlefit;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;

import com.google.android.gms.common.api.GoogleApiClient;
//import com.google.android.gms.fit.samples.common.logger.Log;
import com.google.android.gms.fitness.Fitness;
import com.google.android.gms.fitness.FitnessActivities;
import com.google.android.gms.fitness.data.Bucket;
import com.google.android.gms.fitness.data.DataPoint;
import com.google.android.gms.fitness.data.DataSet;
import com.google.android.gms.fitness.data.DataSource;
import com.google.android.gms.fitness.data.DataType;
import com.google.android.gms.fitness.data.Field;
import com.google.android.gms.fitness.request.DataReadRequest;
import com.google.android.gms.fitness.result.DataReadResult;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class QueryAggregator {
    public static final String TAG = "QueryAggregator";

    public static WritableArray getAggregatedDataByDays(GoogleApiClient client, long startTime, long endTime, DataReadRequest readRequest, String valType) {
        DataReadResult dataReadResult = Fitness.HistoryApi.readData(client, readRequest).await(1, TimeUnit.MINUTES);

        int msInDay = 86400000;
        int days = (int)Math.ceil( (float)(endTime-startTime)/msInDay );

        WritableArray itemMap = Arguments.createArray();

        for (int i=0; i<days; i++)
        {
            if (dataReadResult.getBuckets().size() >= i+1) {
                Bucket bucket = dataReadResult.getBuckets().get(i);
                handleDataSet(bucket.getDataSets().get(0), itemMap, startTime, i, valType);
            }
            else {
                WritableMap map = Arguments.createMap();
                map.putDouble("date", Utils.getDefaultTime(startTime, i));
                if (valType.equals("int")) {
                    map.putInt("value", 0);
                } else {
                    map.putDouble("value", 0);
                }
                itemMap.pushMap(map);
            }
        }

        return itemMap;
    }

    public static DataReadRequest queryData(long startTime, long endTime, DataSource inputDataSource, DataType outputDataType) {
        DateFormat dateFormat = DateFormat.getDateInstance();        
        DataReadRequest readRequest = new DataReadRequest.Builder()
                .aggregate(inputDataSource, outputDataType)
                .bucketByTime(1, TimeUnit.DAYS)
                .setTimeRange(startTime, endTime, TimeUnit.MILLISECONDS)
                .build();
        return readRequest;
    }

    public static DataReadRequest queryData(long startTime, long endTime, DataType inputDataType, DataType outputDataType) {
        DateFormat dateFormat = DateFormat.getDateInstance();        
        DataReadRequest readRequest = new DataReadRequest.Builder()
                .aggregate(inputDataType, outputDataType)
                .bucketByTime(1, TimeUnit.DAYS)
                .setTimeRange(startTime, endTime, TimeUnit.MILLISECONDS)
                .build();
        return readRequest;
    }

    private static void handleDataSet(DataSet dataSet, WritableArray itemMap, long startTime, int bucketInd, String valType) {
        DateFormat dateFormat = DateFormat.getDateInstance();
        DateFormat timeFormat = DateFormat.getTimeInstance();

        WritableMap map = Arguments.createMap();
        map.putDouble("date", Utils.getDefaultTime(startTime, bucketInd));

        int intVal = 0;
        float floatVal = 0;
        for (DataPoint dp : dataSet.getDataPoints()) {
            if (dp.getDataType().equals(DataType.AGGREGATE_ACTIVITY_SUMMARY)) {
                String activity = dp.getValue(Field.FIELD_ACTIVITY).asActivity();
                if (!activity.equals(FitnessActivities.STILL)) {
                    intVal += dp.getValue(Field.FIELD_DURATION).asInt();  
                }
            } else
            if (dp.getDataType().equals(DataType.AGGREGATE_STEP_COUNT_DELTA)) {
                int steps = dp.getValue(Field.FIELD_STEPS).asInt();
                intVal += steps;
            } else
            if (dp.getDataType().equals(DataType.AGGREGATE_DISTANCE_DELTA)) {
                float distance = dp.getValue(Field.FIELD_DISTANCE).asFloat();
                floatVal += distance;
            } else
            if (dp.getDataType().equals(DataType.AGGREGATE_CALORIES_EXPENDED)) {
                float calories = dp.getValue(Field.FIELD_CALORIES).asFloat();
                floatVal += calories;
            }
        }
        
        if (valType.equals("int")) {
            map.putInt("value", intVal);
        } else {
            map.putDouble("value", floatVal);
        }
        
        itemMap.pushMap(map);
    }
}